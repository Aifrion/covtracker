{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","isRed","cases","active","total","props","country","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","points","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","React","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroudnColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4676e7c.chunk.js","sourcesContent":["import React from 'react'\nimport {Card, CardContent, Typography} from \"@material-ui/core\"\nimport \"./InfoBox.css\"\n\nfunction InfoBox({title, isRed, cases, active, total, country, ...props }) {\n    return (\n        <Card onClick = {props.onClick} className = {`infobox ${active && 'infobox--selected'} ${isRed && 'infobox--red'}`}>\n            <CardContent>\n                {/* Title */}\n                <Typography color = \"textSecondary\" className=\"infobox__title\">{title}</Typography>\n                {/* Cases */} \n                <h2 className = {`infobox ${!isRed && \"infobox__cases--green\"}`}>{cases}</h2>\n                {/* Total */}\n                <Typography className = \"infobox__total\" color = \"textSecondary\">{total} total</Typography>\n              \n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import {Circle, Popup} from \"react-leaflet\"\nimport React from \"react\";\nimport numeral from \"numeral\"\n\nconst casesTypeColors = {\n    cases:{\n        hex: \"#CC1034\",\n        // rgb: \"rgb(204, 16, 52)\",\n        // half_op: \"rgba(204, 26, 52, 0.5)\",\n        multiplier: 800\n    },\n    recovered:{\n        hex: \"#7dd71d\",\n        // rgb: \"rgb(125, 215, 29)\",\n        // half_op: \"rgba(125, 215, 29, 0.5)\",\n        multiplier: 1200\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        // rgb: \"rgb(251, 68, 67, 0.5)\",\n        // half_op: \"rgba(125, 215, 67, 0.5)\",\n        multiplier: 2000\n    }\n}\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1: 1))\n    \n    // sortedData.sort((a, b)=>{\n    //     if (a.cases>b.cases){\n    //         return -1;\n    //     }\n    //     else {\n    //         return 1;\n    //     }\n    // })\n    // return sortedData;\n};\n\nexport const prettyPrintStat = (stat) => \nstat ? `+${numeral(stat).format(\"0.0a\")}`: \"+0\";\n\n// DRAW circles on the map with interactive tooltip\nexport const showDataOnMap= (data, casesType=\"cases\") => (\n    data.map(country => (\n        <Circle\n            center = {[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity = {0.4}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            radius = {\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n            }\n        >\n            <Popup>\n                <div className = \"info-container\">\n                    <div className = \"infoFlag\"\n                        style = {{ backgroundImage: `url(${country.countryInfo.flag})`}}\n                    />\n                    <div className = \"infoName\">\n                        {country.country}\n                    </div>\n                    <div className = \"infoConfirmed\">\n                        Cases: {numeral(country.cases).format(\"0,0\")}\n                    </div>\n                    <div className = \"infoRecovered\">\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\n                    </div>\n                    <div className = \"infoDeaths\">\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}\n                    </div>\n                </div>\n            </Popup>\n        </Circle>\n    ))\n)","import React from 'react'\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\"\nimport \"./Map.css\"\nimport {showDataOnMap} from \"./util\"\nfunction Map({countries, casesType, center, zoom}) {\n    return (\n        <div className = \"map\">\n            <LeafletMap center={center} zoom = {zoom}>\n                <TileLayer\n                    url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution = '&copy; <a href = \"http://osm.org/copyright\">OpenStreet</a> contributors'\n                />\n                {/* function to loop through countries and draw circles on the map */}\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n\n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react'\nimport \"./Table.css\"\nimport numeral from \"numeral\"\nfunction Table({countries}) {\n    return (\n        <div className = \"table\">\n            {countries.map(({country, cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table \n","import React, {useEffect} from 'react'\nimport {Line} from \"react-chartjs-2\"\nimport numeral from \"numeral\"\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        points: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data){\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            }\n        }\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat:\"ll\",\n                }\n            }\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    callback: function(value, index, values){\n                        return numeral(value).format(\"0a\")\n                    }\n                }\n            }\n        ]\n    }\n}\nconst buildChartData =(data, casesType=\"cases\")=>{\n        let chartData =[];\n        let lastDataPoint;\n\n        for(let date in data.cases) {\n            if(lastDataPoint){\n                let newDataPoint ={\n                    x: date,\n                    y: data[casesType][date] - lastDataPoint\n                }\n                chartData.push(newDataPoint);\n            }\n            lastDataPoint = data[casesType][date];\n            \n        }\n        return chartData; \n    }\nfunction LineGraph({casesType = \"cases\", ...props}) {\n    const [data, setData] = React.useState({})\n    useEffect(() => {\n        const fetchData = async () =>{\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=60\")\n            .then((response) => {return response.json()})\n            .then((data) =>{\n            let chartData= buildChartData(data, casesType);\n            setData(chartData);\n            \n        })\n        }\n        fetchData();\n    }, [casesType])\n   \n    return (\n        <div className = {props.className}>\n            {data?.length > 0 &&(\n                <Line\n                data = {{\n                    datasets:[\n                        {\n                            data: data,\n                            backgroudnColor: \"rgba(204, 16, 52, 0.3)\",\n                            borderColor: \"#cc1034\",\n                        }\n                    ]\n                }}\n                options = {options}\n            />\n            )}\n            \n        </div>\n    )\n}\n\nexport default LineGraph\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {MenuItem, FormControl, Select, Card, CardContent} from \"@material-ui/core\"\nimport InfoBox from \"./InfoBox\"\nimport Map from \"./Map\"\nimport Table from \"./Table\"\nimport {sortData} from \"./util.js\"\nimport LineGraph from \"./LineGraph\"\nimport \"leaflet/dist/leaflet.css\"\nimport {prettyPrintStat} from \"./util\"\nfunction App() {\n\n\n  const [countries, setCountries] = React.useState([])\n  // \"https://disease.sh​/v3​/covid-19​/countries\"\n  // USEEFFECT = runs a piece of code based on a given condition \n  const [country, setCountry] = React.useState(\"worldwide\")\n  const [countryInfo, setCountryInfo] = React.useState({})\n  const [tableData, setTableData] = React.useState([])\n  const [mapCenter, setMapCenter] = React.useState({lat:34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = React.useState((3));\n  const [mapCountries, setMapCountries] = React.useState([])\n  const [casesType, setCasesType] = React.useState(\"cases\")\n  useEffect(()=> {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data =>{\n      setCountryInfo(data);\n    })\n  }, [])\n  useEffect(() => {\n    // the code here will run once when the component loads and not again after \n    // async -> send a request, wait for it, do something with it\n\n    const getCountriesData = async() => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        \n         const countries = data.map((country) => ({\n           name: country.country, // United States, United Kingdom\n           value: country.countryInfo.iso2 // UK, USA, FR\n         }))\n         const sortedData = sortData(data);\n         setTableData(sortedData);\n         setMapCountries(data);\n         setCountries(countries);\n      })\n    }\n      getCountriesData();\n  }, [])\n\n  const onCountryChange = async(event) =>{\n    const countryCode = event.target.value;  \n    const url = countryCode === \"worldwide\"? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data)\n      countryCode===\"worldwide\"? setMapCenter({lat:34.80746, lng: -40.4796}): setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n      setMapZoom(4);\n    })\n  }\n  \n  return (\n    <div className=\"app\">\n      <div className= \"app__left\">\n        <div className=\"app__header\">\n        <h1>COVID-19</h1>\n          <FormControl className =\"app__dropdown\">\n            <Select\n            variant = \"outlined\"\n            value={country}\n            onChange={onCountryChange}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n              \n              \n              {/* <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              <MenuItem value=\"worldwide\">Option2</MenuItem>\n              <MenuItem value=\"worldwide\">Option3</MenuItem>\n              <MenuItem value=\"worldwide\">Option4</MenuItem> */}\n            </Select>\n          </FormControl>\n        </div>\n      \n        {/* Header */}\n        {/* Title + select input dropdown field */}\n\n        {/* infobox */}\n        {/* infobox */}\n        {/* infobox */}\n        <div className=\"app__stats\">\n          {/* InfoBox title=\"Cases\" */}\n          <InfoBox isRed active={casesType === \"cases\"} onClick ={(e) => setCasesType(\"cases\")} title = \"Corona Virus Cases\" cases = {prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} country = {country}/>\n          {/* InfoBox title =\"Recoveries\" */}\n          <InfoBox active={casesType === \"recovered\"} onClick = {(e)=> setCasesType(\"recovered\")} title = \"Recovered\" cases = {prettyPrintStat(countryInfo.todayRecovered)} total ={prettyPrintStat(countryInfo.recovered)} country = {country}/>\n          {/* Infobox title =\"Deaths\" */}\n          <InfoBox isRed active={casesType === \"deaths\"} onClick = {(e) => setCasesType(\"deaths\")} title = \"Deaths\" cases = {prettyPrintStat(countryInfo.todayDeaths)} total = {prettyPrintStat(countryInfo.deaths)} country = {country}/>\n        </div>\n        {/* Map */}\n\n        <Map\n          countries = {mapCountries}\n          casesType = {casesType}\n          center ={mapCenter}\n          zoom = {mapZoom}\n        />\n      </div>\n\n       {/* Table */}\n       {/* Graph */}\n       <Card className =\"app__right\">\n         <CardContent>\n           <h3>Live Cases By Country</h3>\n           <Table countries={tableData}/>\n           <h3 className = \"app__graphTitle\">Worldwide New {casesType}</h3>\n           <LineGraph className =\"app__graph\" casesType={casesType}/>\n         </CardContent>\n       </Card>\n       \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}